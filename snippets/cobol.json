{
	"class-id": {
		"prefix": "class-id",
		"body": [
			"class-id $1 ${3|public,private|}.",
			"",
			"method-id new public.",
			"procedure division.",
			"    $0",
			"    exit method.",
			"end method.",
			"",
			"end class."
		],
		"description": "class with ctor",
		"scope": "cobol"
	},
	"enum-id": {
		"prefix": [
			"enum-id",
			"ei"
		],
		"body": [
			"*>> <summary>enum-id $1</summary>",
			"enum-id. $1 as \"Status\".",
			"    78 ${2:Item}  value ${3:1}.",
			"end enum $1.",
			""
		],
		"description": "enum-id",
		"scope": "cobol"
	},
	"exec-sql": {
		"prefix": "exec",
		"body": [
			"exec sql include sqlca end-exec."
		],
		"description": "exec sql include",
		"scope": "cobol"
	},
	"exec-sql-begin": {
		"prefix": "exec",
		"body": [
			"exec sql begin declare section end-exec.",
			"$0",
			"exec sql end declare section end-exec."
		],
		"description": "exec sql declare",
		"scope": "cobol"
	},
	"main method-id": {
		"prefix": "main",
		"body": [
			"*>> <summary>method main</summary>",
			"method-id main public static.",
			"procedure division using",
			"           by value args as string occurs any.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id (main)",
		"scope": "cobol"
	},
	"method-id": {
		"prefix": [
			"method-id",
			"mi"
		],
		"body": [
			"*>> <summary>method $1</summary>",
			"method-id $1.",
			"procedure division.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id",
		"scope": "cobol"
	},
	"<summary>": {
		"prefix": [
			"<summary>"
		],
		"body": [
			"<summary>$1</summary>$0"
		],
		"description": "doc-comment summary",
		"scope": "cobol"
	},

	"<example>": {
		"prefix": [
			"<example>"
		],
		"body": [
			"<example>$1",
			"*>> <code>$2",
			"*>> </code>",
			"*>> </example>$0"
		],
		"description": "doc-comment example with code",
		"scope": "cobol"
	},
	"<para>": {
		"prefix": [
			"<para>"
		],
		"body": [
			"<para>",
			"*>> $1",
			"*>> </para>$0"
		],
		"description": "doc-comment paragraph",
		"scope": "cobol"
	},
	"<remarks>": {
		"prefix": [
			"<remarks>"
		],
		"body": [
			"<remarks>",
			"*>> $1",
			"*>> </remarks>$0"
		],
		"description": "doc-comment remarks",
		"scope": "cobol"
	},
	"<returns>": {
		"prefix": [
			"<returns>"
		],
		"body": [
			"<returns>",
			"*>> $1",
			"*>> </returns>$0"
		],
		"description": "doc-comment returns",
		"scope": "cobol"
	},
	"<param>": {
		"prefix": [
			"<param>"
		],
		"body": [
			"<param name=\"$1\"$2</param>$0"
		],
		"description": "doc-comment param",
		"scope": "cobol"
	},
	"<exception>": {
		"prefix": [
			"<exception>"
		],
		"body": [
			"<exception cref=\"$1\"$2</exception>$0"
		],
		"description": "doc-comment exception",
		"scope": "cobol"
	},
	"MFUnit Test (Program)": {
		"prefix": [
			"mfu",
			"mfup"
		],
		"isFileTemplate": true,
		"body": [
			"       copy \"mfunit_prototypes.cpy\".",
			"",
			"       identification division.",
			"       program-id. Test${1:${TM_FILENAME_BASE/Test(.*)/$1/}}.",
			"",
			"       data division.",
			"       working-storage section.",
			"       78 TEST-Program value \"${1}\".",
			"       copy \"mfunit.cpy\".",
			"       78 TEST-PRELOAD-LIBRARY value \"${3}\".",
			"       01 TEST-PP              procedure-pointer.",
			"",
			"       *> Testcase     : $1",
			"       *>  Description : ${2:The description of the test case}",
			"       procedure division.",
			"           goback returning 0",
			"       .",
			"",
			"       entry MFU-TC-PREFIX & TEST-${1}.",
			"      *> Test code goes here.",
			"           $0",
			"           goback returning MFU-PASS-RETURN-CODE",
			"       .",
			"",
			"      \\$region Test Configuration",
			"      *> Setup Code:",
			"       entry MFU-TC-SETUP-PREFIX & TEST-${1}.",
			"           perform InitializeLinkageData",
			"",
			"           *> Add any other test setup code here",
			"           goback returning 0",
			"       .",
			"",
			"      *> Teardown Code:",
			"       entry MFU-TC-TEARDOWN-PREFIX & TEST-${1}.",
			"           goback returning 0",
			"       .",
			"",
			"      *> Metadata:",
			"       entry MFU-TC-METADATA-SETUP-PREFIX & TEST-${1}.",
			"           move \"${2}\" to MFU-MD-TESTCASE-DESCRIPTION",
			"           move ${4:100000} to MFU-MD-TIMEOUT-IN-MS",
			"           move \"${5:smoke,regression,sanity,interface,other}\" to MFU-MD-TRAITS",
			"           set MFU-MD-SKIP-TESTCASE to False",
			"           goback returning 0",
			"       .",
			"",
			"       InitializeLinkageData section.",
			"           if TEST-PRELOAD-LIBRARY not equal spaces",
			"      *> Load the library that is being tested",
			"               set TEST-PP to entry TEST-PRELOAD-LIBRARY",
			"           end-if",
			"           exit section",
			"       .",
			"      \\$end-region",
			"",
			"       end program Test${1}."
		],
		"description": "MFUNIT skeleton program",
		"scope": "cobol"
	},
	"MFUnit Test (Entry Point)": {
		"prefix": [
			"mfu",
			"mfuep"
		],
		"body": [
			"       Test-${1} Section.",
			"       entry MFU-TC-PREFIX & \"${1}\".",
			"      *> Test code goes here.",
			"           $0",
			"           goback returning MFU-PASS-RETURN-CODE",
			"       .",
			"",
			"      \\$region Test Configuration for ${1}",
			"      *> Setup Code:",
			"       entry MFU-TC-SETUP-PREFIX & \"${1}\".",
			"           goback returning 0.",
			"",
			"      *> Teardown Code:",
			"       entry MFU-TC-TEARDOWN-PREFIX & \"${1}\".",
			"           goback returning 0.",
			"",
			"      *> Metadata:",
			"       entry MFU-TC-METADATA-SETUP-PREFIX & \"${1}\".",
			"           move \"${2}\" to MFU-MD-TESTCASE-DESCRIPTION",
			"           move ${4:100000} to MFU-MD-TIMEOUT-IN-MS",
			"           move \"${5:smoke,regression,sanity,interface,other}\"",
			"                to MFU-MD-TRAITS",
			"           set MFU-MD-SKIP-TESTCASE to False",
			"           goback returning 0.",
			"",
			"      \\$end-region"
		],
		"description": "MFUNIT Test Case as a Entry Point",
		"scope": "cobol"
	},
	"IDENTIFICATION (CICS)": {
		"prefix": "IDENTIFICATION",
		"isFileTemplate": true,
		"body": [
			"        IDENTIFICATION DIVISION. ",
			"        PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"        DATA DIVISION.",
			"        WORKING-STORAGE SECTION. ",
			"        01 OUT-MSG.",
			"         02 FILLER PIC X(6) VALUE \"Hello \". ",
			"         02 MSG    PIC X(20).",
			"        01 INP-MSG PIC X(20) VALUE \"What is your name? \".     ",
			"        PROCEDURE DIVISION.",
			"        PARA1.",
			"            EXEC CICS",
			"                 SEND FROM(INP-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RECEIVE INTO (MSG)",
			"            END-EXEC",
			"",
			"       *",
			"            EXEC CICS",
			"                 SEND FROM (OUT-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RETURN",
			"            END-EXEC.",
			"",
			"       *",
			"        END PROGRAM $1.",
			""
		],
		"description": "Template for program (CICS)",
		"scope": "cobol"
	},
	"Minimum Line Sequential": {
		"prefix": "identification",
		"isFileTemplate": true,
		"body": [
			"       identification division.",
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       input-output section.",
			"        file-control.",
			"        select ${2:cust} assign to '${4:$2}.txt'",
			"        organization is line sequential.            ",
			"",
			"       data division.",
			"       file section.",
			"       fd $2.",
			"       01 ${3:$2-file}.",
			"        03 ${5:customer-id}    pic 9(5).",
			"        03 ${6:customer-info}  pic x(65).",
			"",
			"       working-storage section.",
			"       01 ws-eof       pic a. ",
			"",
			"       procedure division.",
			"          open input $2.",
			"             perform until ws-eof='Y'",
			"                read $2",
			"                   at end",
			"                      move 'Y' to ws-eof",
			"                   not at end",
			"                      display ${5} \" => \" ${6}",
			"                end-read",
			"             end-perform",
			"          close $2.",
			"          $0",
			"          goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template File/Seq",
		"scope": "cobol"
	},
	"Minimum mainframe program [uppercase]": {
		"prefix": "IDENTIFICATION",
		"isFileTemplate": true,
		"body": [
			"       IDENTIFICATION DIVISION.",
			"       PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       AUTHOR. $2.",
			"       INSTALLATION.  ${3:where}.",
			"       DATE-WRITTEN.  ${4:$CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR}.",
			"       DATE-COMPILED. ${5:$4}.",
			"       SECURITY.",
			"       ENVIRONMENT DIVISION.",
			"       CONFIGURATION SECTION.",
			"       SOURCE-COMPUTER. ${6:pc}.",
			"       OBJECT-COMPUTER. ${7:${6}}.",
			"       SPECIAL-NAMES.",
			"       INPUT-OUTPUT SECTION.",
			"       FILE-CONTROL.",
			"       DATA DIVISION.",
			"        FILE SECTION.",
			"        WORKING-STORAGE SECTION.",
			"        LINKAGE SECTION.",
			"       PROCEDURE DIVISION.",
			"        DECLARATIVES.",
			"        END DECLARATIVES.",
			"        main-processing SECTION.",
			"         mainline-paragraph.",
			"             $0",
			"             STOP RUN."
		],
		"description": "Template for mainframe",
		"scope": "cobol"
	},
	"Skelton program": {
		"prefix": "program-id",
		"isFileTemplate": true,
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       configuration section.",
			"",
			"       data division.",
			"       working-storage section.",
			"",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Small template for program",
		"scope": "cobol"
	},
	"Minimum program": {
		"prefix": "program-id",
		"isFileTemplate": true,
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template",
		"scope": "cobol"
	},
	"property": {
		"prefix": "property",
		"body": [
			"01 ${2:_prop} ${3:binary-long} private.",
			"method-id. get property #${1:Prop}.",
			"procedure division returning ret as ${3:binary-long}.",
			"    set ret to ${2:_prop}",
			"end method.",
			"method-id. set property #${1:Prop}.",
			"procedure division using by value val as ${3:binary-long}.",
			"    set ${2:_prop} to 0",
			"end method.",
			""
		],
		"description": "set/get property",
		"scope": "cobol"
	},
	"try catch end-try": {
		"prefix": "try",
		"body": [
			"try",
			"   $0",
			"catch ${1:Exception}",
			"   $2",
			"end-try"
		],
		"description": "try catch",
		"scope": "cobol"
	},
	"$region $end-region(wrap)": {
		"prefix": "$region",
		"body": [
			"\\$region ${1:description}",
			"  ${TM_SELECTED_TEXT}",
			"\\$end-region",
			"${0}"
		],
		"description": "$region .. $end-region",
		"scope": "cobol"
	},
	"try catch end-try (wrap)": {
		"prefix": "try",
		"body": [
			"try",
			"  ${TM_SELECTED_TEXT}",
			"catch ${1:Exception}",
			"  ${0}",
			"end-try"
		],
		"description": "try catch",
		"scope": "cobol"
	},
	"valuetype-id": {
		"prefix": [
			"vi",
			"valuetype-id"
		],
		"body": [
			"valuetype-id $1 ${2:public}.",
			"01 item string ${2:public}.",
			"",
			"method-id new ${2:public}.",
			"procedure division.",
			"   $0",
			"end method.",
			"",
			"end valuetype."
		],
		"description": "valuetype",
		"scope": "cobol"
	},
	"selection-to-perform-section": {
		"prefix": "perform",
		"body": [
			"           perform ${1:new-section}.",
			"",
			"       ${1} section.",
			"${TM_SELECTED_TEXT}",
			"           exit section."
		],
		"description": "Create 'perform section' from selection",
		"scope": "cobol"
	},
	"java-sharable-section": {
		"prefix": "java-sharable",
		"body": [
			"       >>JAVA-SHAREABLE ON",
			"${TM_SELECTED_TEXT}",
			"       >>JAVA-SHAREABLE OFF"
		],
		"description": "Wrapping working-storage items that are interoperable with Java",
		"scope": "cobol"
	},
	"exec-dli-log" : {
		"prefix": "exec dli log",
		"body" : [
			"EXEC DLI LOG",
       		"     FROM(${1}) LENGTH(${2})",
			"END-EXEC"
		],
		"scope": "cobol"
	}
}