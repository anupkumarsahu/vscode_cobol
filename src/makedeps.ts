import path from "path";
import { ICOBOLSettings } from "./iconfiguration";

export class MakeDep {
    public static CreateDependencyFile(settings: ICOBOLSettings, sn: string, copyBooksNames: Array<string>, processUnUsedCopyBooks: Array<string>, activeDocumentFilename: string): Array<string> {
        const sb: Array<string> = [];
        if (settings.makefile_dependency_file === false) {
            return sb;
        }
        const sn_with_no_ext = path.basename(sn, path.extname(sn));
        const sn_base = path.basename(sn);
        if (activeDocumentFilename !== undefined && activeDocumentFilename.length !== 0) {
            sb.push(`# Make dependency file for ${path.basename(activeDocumentFilename)}`);
        }
        sb.push(`# Generated by VSCode COBOL extension`);;
        let maxCopybooks = copyBooksNames.length;
        const hasCopyBooks = maxCopybooks > 0 ? ' \\' : '';
        if (settings.makefile_dependancy_fullpath) {
            sb.push(`${sn_with_no_ext}.o: ${sn}${hasCopyBooks}`);
        } else {
            sb.push(`${sn_with_no_ext}.o: ${sn_base}${hasCopyBooks}`);
        }
        
        for (const key of copyBooksNames) {
            const hasSlash = maxCopybooks !== 1 ? ' \\' : '';
            if (settings.makefile_dependancy_fullpath) {
                sb.push(`\t${key}${hasSlash}`);
            } else {
                sb.push(`\t${path.basename(key)}${hasSlash}`);
            }
            maxCopybooks--;
        }

        for (const key of processUnUsedCopyBooks) {
            sb.push(`# Unresolved: ${key}`);
        }

        return sb;
    }
}
