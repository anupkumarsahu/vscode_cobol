import * as vscode from "vscode";
import { VSLogger } from "./vslogger";
import { VSWorkspaceFolders } from "./vscobolfolders";
import { ICOBOLSettings } from "./iconfiguration";
import path from "path";
import { VSCOBOLSourceScanner } from "./vscobolscanner";

export class VSMakeDep {
    public static async MakeDependency(config: ICOBOLSettings) {
        if (vscode.window.activeTextEditor) {
            const sb = new Array<string>();

            const current = VSCOBOLSourceScanner.getCachedObject(vscode.window.activeTextEditor.document, config);
            if (current === undefined) {
                return;
            }
            sb.push(`# Make dependency file for ${path.basename(vscode.window.activeTextEditor.document.fileName)}`);
            sb.push(`# Generated by VSCode COBOL extension`);
            const sn = current.sourceHandler.getShortWorkspaceFilename();
            const sn_with_no_ext = path.basename(sn, path.extname(sn));
            let maxCopybooks = current.copyBooksUsed.size;
            const hasCopyBooks = maxCopybooks > 0 ? ' \\' : '';
            sb.push(`${sn_with_no_ext}.o: ${sn}${hasCopyBooks}`);    
            for (const [key,] of current.copyBooksUsed) {
                const hasSlash = maxCopybooks !== 1 ? ' \\' : '';
                sb.push(`\t${key}${hasSlash}`);
                maxCopybooks--;
            }
            let fpath = "";
            const ws = VSWorkspaceFolders.get(config);
            if (ws) {
                fpath = path.join(ws[0].uri.fsPath, sn_with_no_ext + ".d");
            } else {
                fpath = path.join(process.cwd(), sn_with_no_ext + ".d");
            }
            const furl = vscode.Uri.file(fpath).with({ scheme: "untitled" });
            await vscode.workspace.openTextDocument(furl).then(async document => {
                const editor = await vscode.window.showTextDocument(document);
                if (editor !== undefined) {
                    await vscode.languages.setTextDocumentLanguage(document, "makefile");
                    editor.edit(edit => {
                        edit.insert(new vscode.Position(0, 0), sb.join("\n"))
                    });
                }
            });
            VSLogger.logMessage(sb.join("\n"));
        }


    }
}
